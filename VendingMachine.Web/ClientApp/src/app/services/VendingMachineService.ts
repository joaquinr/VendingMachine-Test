/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IVendingMachineClient {
    /**
     * Gets the current client side machine state for its use in a UI
     */
    getMachineState(): Observable<VendingMachineData>;
    /**
     * Adds a coin to the user's input
     */
    insertCoin(denomination: number): Observable<boolean>;
    /**
     * Returns coins inserted in the machine by the user
     */
    returnCoins(): Observable<{ [key: string]: number; }>;
    /**
     * Sells a product to the customer.
     * @return Status code for the operation and any change
     */
    sellProduct(productName: string | null): Observable<SellProductResult>;
}

@Injectable()
export class VendingMachineClient implements IVendingMachineClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Gets the current client side machine state for its use in a UI
     */
    getMachineState(): Observable<VendingMachineData> {
        let url_ = this.baseUrl + "/VendingMachine/GetMachineState";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMachineState(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMachineState(<any>response_);
                } catch (e) {
                    return <Observable<VendingMachineData>><any>_observableThrow(e);
                }
            } else
                return <Observable<VendingMachineData>><any>_observableThrow(response_);
        }));
    }

    protected processGetMachineState(response: HttpResponseBase): Observable<VendingMachineData> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = VendingMachineData.fromJS(resultData200, _mappings);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VendingMachineData>(<any>null);
    }

    /**
     * Adds a coin to the user's input
     */
    insertCoin(denomination: number): Observable<boolean> {
        let url_ = this.baseUrl + "/VendingMachine/InsertCoin?";
        if (denomination === undefined || denomination === null)
            throw new Error("The parameter 'denomination' must be defined and cannot be null.");
        else
            url_ += "denomination=" + encodeURIComponent("" + denomination) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertCoin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertCoin(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processInsertCoin(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * Returns coins inserted in the machine by the user
     */
    returnCoins(): Observable<{ [key: string]: number; }> {
        let url_ = this.baseUrl + "/VendingMachine/ReturnCoins";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReturnCoins(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReturnCoins(<any>response_);
                } catch (e) {
                    return <Observable<{ [key: string]: number; }>><any>_observableThrow(e);
                }
            } else
                return <Observable<{ [key: string]: number; }>><any>_observableThrow(response_);
        }));
    }

    protected processReturnCoins(response: HttpResponseBase): Observable<{ [key: string]: number; }> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200![key] = resultData200[key];
                }
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string]: number; }>(<any>null);
    }

    /**
     * Sells a product to the customer.
     * @return Status code for the operation and any change
     */
    sellProduct(productName: string | null): Observable<SellProductResult> {
        let url_ = this.baseUrl + "/VendingMachine/SellProduct?";
        if (productName === undefined)
            throw new Error("The parameter 'productName' must be defined.");
        else
            url_ += "productName=" + encodeURIComponent("" + productName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSellProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSellProduct(<any>response_);
                } catch (e) {
                    return <Observable<SellProductResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<SellProductResult>><any>_observableThrow(response_);
        }));
    }

    protected processSellProduct(response: HttpResponseBase): Observable<SellProductResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = SellProductResult.fromJS(resultData200, _mappings);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SellProductResult>(<any>null);
    }
}

export class VendingMachineData implements IVendingMachineData {
    currentInsertedAmount!: number;
    availableProducts!: Product[] | undefined;
    availableCoins!: { [key: string]: number; } | undefined;

    constructor(data?: IVendingMachineData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.currentInsertedAmount = _data["currentInsertedAmount"];
            if (Array.isArray(_data["availableProducts"])) {
                this.availableProducts = [] as any;
                for (let item of _data["availableProducts"])
                    this.availableProducts!.push(Product.fromJS(item, _mappings));
            }
            if (_data["availableCoins"]) {
                this.availableCoins = {} as any;
                for (let key in _data["availableCoins"]) {
                    if (_data["availableCoins"].hasOwnProperty(key))
                        this.availableCoins![key] = _data["availableCoins"][key];
                }
            }
        }
    }

    static fromJS(data: any, _mappings?: any): VendingMachineData {
        data = typeof data === 'object' ? data : {};
        return createInstance<VendingMachineData>(data, _mappings, VendingMachineData);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentInsertedAmount"] = this.currentInsertedAmount;
        if (Array.isArray(this.availableProducts)) {
            data["availableProducts"] = [];
            for (let item of this.availableProducts)
                data["availableProducts"].push(item.toJSON());
        }
        if (this.availableCoins) {
            data["availableCoins"] = {};
            for (let key in this.availableCoins) {
                if (this.availableCoins.hasOwnProperty(key))
                    data["availableCoins"][key] = this.availableCoins[key];
            }
        }
        return data; 
    }
}

export interface IVendingMachineData {
    currentInsertedAmount: number;
    availableProducts: Product[] | undefined;
    availableCoins: { [key: string]: number; } | undefined;
}

/** Models a product inserted on the machine */
export class Product implements IProduct {
    /** Product name, used as ID for the sell operation */
    name!: string | undefined;
    /** Product unit price */
    price!: number;
    quantity!: number;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"];
            this.price = _data["price"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any, _mappings?: any): Product {
        data = typeof data === 'object' ? data : {};
        return createInstance<Product>(data, _mappings, Product);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["price"] = this.price;
        data["quantity"] = this.quantity;
        return data; 
    }
}

/** Models a product inserted on the machine */
export interface IProduct {
    /** Product name, used as ID for the sell operation */
    name: string | undefined;
    /** Product unit price */
    price: number;
    quantity: number;
}

/** DTO to return sell product operation's status code and change in a single object */
export class SellProductResult implements ISellProductResult {
    change!: { [key: string]: number; } | undefined;
    status!: ESellProductStatus;

    constructor(data?: ISellProductResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (_data["change"]) {
                this.change = {} as any;
                for (let key in _data["change"]) {
                    if (_data["change"].hasOwnProperty(key))
                        this.change![key] = _data["change"][key];
                }
            }
            this.status = _data["status"];
        }
    }

    static fromJS(data: any, _mappings?: any): SellProductResult {
        data = typeof data === 'object' ? data : {};
        return createInstance<SellProductResult>(data, _mappings, SellProductResult);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.change) {
            data["change"] = {};
            for (let key in this.change) {
                if (this.change.hasOwnProperty(key))
                    data["change"][key] = this.change[key];
            }
        }
        data["status"] = this.status;
        return data; 
    }
}

/** DTO to return sell product operation's status code and change in a single object */
export interface ISellProductResult {
    change: { [key: string]: number; } | undefined;
    status: ESellProductStatus;
}

/** Current result of the sell product operation */
export enum ESellProductStatus {
    Success = 0,
    InsufficientFunds = 1,
    SoldOut = 2,
    OutOfChange = 3,
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T {
    if (!mappings)
        mappings = [];
    else {
        let mapping = mappings.filter((m: any) => m.source === data);
        if (mapping.length === 1)
            return <T>mapping[0].target;
    }

    let result: any = new type();
    mappings.push({ source: data, target: result });
    result.init(data, mappings);
    return result;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}